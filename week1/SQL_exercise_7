
--------------------------------------------------------------------------------------------------------------------
                                               SCENARIO 1 
--------------------------------------------------------------------------------------------------------------------

-- Package Specification
CREATE OR REPLACE PACKAGE CustomerManagement AS
  PROCEDURE AddCustomer(p_id NUMBER, p_name VARCHAR2, p_dob DATE, p_bal NUMBER);
  PROCEDURE UpdateCustomer(p_id NUMBER, p_name VARCHAR2);
  FUNCTION GetBalance(p_id NUMBER) RETURN NUMBER;
END CustomerManagement;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
  PROCEDURE AddCustomer(p_id NUMBER, p_name VARCHAR2, p_dob DATE, p_bal NUMBER) IS
  BEGIN
    INSERT INTO Customers VALUES (p_id, p_name, p_dob, p_bal, SYSDATE);
    DBMS_OUTPUT.PUT_LINE('‚úÖ Customer added: ' || p_name);
  END;

  PROCEDURE UpdateCustomer(p_id NUMBER, p_name VARCHAR2) IS
  BEGIN
    UPDATE Customers SET Name = p_name WHERE CustomerID = p_id;
    DBMS_OUTPUT.PUT_LINE('‚úèÔ∏è Name updated for ID: ' || p_id);
  END;

  FUNCTION GetBalance(p_id NUMBER) RETURN NUMBER IS
    v_bal NUMBER;
  BEGIN
    SELECT Balance INTO v_bal FROM Customers WHERE CustomerID = p_id;
    RETURN v_bal;
  END;
END CustomerManagement;
/

-- Execution
BEGIN
  CustomerManagement.AddCustomer(5, 'Charan', TO_DATE('2002-02-02', 'YYYY-MM-DD'), 7000);
  CustomerManagement.UpdateCustomer(5, 'Charan Reddy');
  DBMS_OUTPUT.PUT_LINE('üí∞ Balance: ' || CustomerManagement.GetBalance(5));
END;
/


OUTPUT : 

‚úÖ Customer added: Charan
‚úèÔ∏è Name updated for ID: 5
üí∞ Balance: 7000


--------------------------------------------------------------------------------------------------------------------
                                               SCENARIO 2 
--------------------------------------------------------------------------------------------------------------------

-- Specification
CREATE OR REPLACE PACKAGE EmployeeManagement AS
  PROCEDURE HireEmployee(p_id NUMBER, p_name VARCHAR2, p_dept VARCHAR2, p_salary NUMBER);
  PROCEDURE UpdateDetails(p_id NUMBER, p_name VARCHAR2);
  FUNCTION AnnualSalary(p_id NUMBER) RETURN NUMBER;
END EmployeeManagement;
/

-- Body
CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
  PROCEDURE HireEmployee(p_id NUMBER, p_name VARCHAR2, p_dept VARCHAR2, p_salary NUMBER) IS
  BEGIN
    INSERT INTO Employees VALUES (p_id, p_name, p_dept, p_salary);
    DBMS_OUTPUT.PUT_LINE('üë®‚Äçüíº Hired: ' || p_name);
  END;

  PROCEDURE UpdateDetails(p_id NUMBER, p_name VARCHAR2) IS
  BEGIN
    UPDATE Employees SET Name = p_name WHERE EmployeeID = p_id;
    DBMS_OUTPUT.PUT_LINE('‚úèÔ∏è Name updated: ' || p_id);
  END;

  FUNCTION AnnualSalary(p_id NUMBER) RETURN NUMBER IS
    v_salary NUMBER;
  BEGIN
    SELECT Salary * 12 INTO v_salary FROM Employees WHERE EmployeeID = p_id;
    RETURN v_salary;
  END;
END EmployeeManagement;
/

-- Execution
BEGIN
  EmployeeManagement.HireEmployee(10, 'Sivesh', 'IT', 40000);
  EmployeeManagement.UpdateDetails(10, 'Sivesh Kumar');
  DBMS_OUTPUT.PUT_LINE('üìÖ Annual Salary: ' || EmployeeManagement.AnnualSalary(10));
END;
/



OUTPUT : 

üë®‚Äçüíº Hired: Sivesh
‚úèÔ∏è Name updated: 10
üìÖ Annual Salary: 480000



--------------------------------------------------------------------------------------------------------------------
                                               SCENARIO 3 
--------------------------------------------------------------------------------------------------------------------


-- Specification
CREATE OR REPLACE PACKAGE AccountOperations AS
  PROCEDURE OpenAccount(p_id NUMBER, p_type VARCHAR2, p_balance NUMBER);
  PROCEDURE CloseAccount(p_id NUMBER);
  FUNCTION TotalBalance(p_cust_id NUMBER) RETURN NUMBER;
END AccountOperations;
/

-- Body
CREATE OR REPLACE PACKAGE BODY AccountOperations AS
  PROCEDURE OpenAccount(p_id NUMBER, p_type VARCHAR2, p_balance NUMBER) IS
  BEGIN
    INSERT INTO Accounts VALUES (p_id, p_type, p_balance);
    DBMS_OUTPUT.PUT_LINE('üè¶ Opened account ID: ' || p_id);
  END;

  PROCEDURE CloseAccount(p_id NUMBER) IS
  BEGIN
    DELETE FROM Accounts WHERE AccountID = p_id;
    DBMS_OUTPUT.PUT_LINE('‚ùå Closed account ID: ' || p_id);
  END;

  FUNCTION TotalBalance(p_cust_id NUMBER) RETURN NUMBER IS
    v_sum NUMBER;
  BEGIN
    SELECT SUM(Balance) INTO v_sum FROM Accounts WHERE AccountID = p_cust_id;
    RETURN v_sum;
  END;
E


OUTPUT : 

üè¶ Opened account ID: 5
üí∞ Total: 9000
‚ùå Closed account ID: 5

