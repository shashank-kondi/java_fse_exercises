EXERCISE 3 â€” STORED PROCEDURES


-------------------------------------------------------------------------------------------------------------------- SCENERIO 1 ---------------------------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest
IS
BEGIN

  UPDATE Accounts
  SET Balance = Balance + (Balance * 0.01)
  WHERE AccountType = 'Savings';

  COMMIT;

  DBMS_OUTPUT.PUT_LINE(' Monthly interest applied to all Savings accounts.');
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(' Error: ' || SQLERRM);
END;
/

  

BEGIN
  ProcessMonthlyInterest;
END;
/


OUTPUT : 
 Monthly interest applied to all Savings accounts.



-------------------------------------------------------------------------------------------------------------------- SCENERIO 2 ---------------------------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
  p_dept IN VARCHAR2,
  p_bonus_percent IN NUMBER
)
IS
BEGIN
  
  UPDATE Employees
  SET Salary = Salary + (Salary * p_bonus_percent / 100)
  WHERE Department = p_dept;

  IF SQL%ROWCOUNT = 0 THEN
    DBMS_OUTPUT.PUT_LINE(' No employees found in department: ' || p_dept);
  ELSE
    DBMS_OUTPUT.PUT_LINE(' Bonus applied to department: ' || p_dept);
  END IF;

  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(' Error updating bonus: ' || SQLERRM);
END;
/


-- Execution  

BEGIN
  UpdateEmployeeBonus('IT', 10);
END;
/


OUTPUT : 

Bonus applied to department: IT



-------------------------------------------------------------------------------------------------------------------- SCENERIO 3 ---------------------------------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PROCEDURE TransferFunds (
  p_from_acct IN NUMBER,
  p_to_acct   IN NUMBER,
  p_amount    IN NUMBER
)
IS
  v_balance NUMBER;
BEGIN
  -- Get source account balance
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_from_acct;

  -- Check if balance is enough
  IF v_balance < p_amount THEN
    RAISE_APPLICATION_ERROR(-20001, ' Insufficient funds');
  END IF;

  -- Transfer the funds
  UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_from_acct;
  UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_to_acct;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE(' Amount ' || p_amount || ' transferred from Account ' || p_from_acct || ' to ' || p_to_acct);
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE(' Transfer failed: ' || SQLERRM);
END;
/


-- Execution  :

BEGIN
  TransferFunds(1, 2, 1000);
END;
/


OUTPUT : 

Amount 1000 transferred from Account 1 to 2
